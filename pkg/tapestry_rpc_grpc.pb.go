// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: pkg/tapestry_rpc.proto

package pkg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TapestryRPCClient is the client API for TapestryRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TapestryRPCClient interface {
	HelloCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error)
	FindRootCaller(ctx context.Context, in *IdMsg, opts ...grpc.CallOption) (*RootMsg, error)
	RegisterCaller(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Ok, error)
	FetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FetchedLocations, error)
	AddNodeCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Neighbors, error)
	RemoveBadNodesCaller(ctx context.Context, in *Neighbors, opts ...grpc.CallOption) (*Ok, error)
	AddNodeMulticastCaller(ctx context.Context, in *MulticastRequest, opts ...grpc.CallOption) (*Neighbors, error)
	TransferCaller(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*Ok, error)
	AddBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error)
	RemoveBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error)
	GetBackpointersCaller(ctx context.Context, in *BackpointerRequest, opts ...grpc.CallOption) (*Neighbors, error)
	NotifyLeaveCaller(ctx context.Context, in *LeaveNotification, opts ...grpc.CallOption) (*Ok, error)
	BlobStoreFetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DataBlob, error)
	TapestryStoreCaller(ctx context.Context, in *DataBlob, opts ...grpc.CallOption) (*Ok, error)
	TapestryLookupCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Neighbors, error)
}

type tapestryRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewTapestryRPCClient(cc grpc.ClientConnInterface) TapestryRPCClient {
	return &tapestryRPCClient{cc}
}

func (c *tapestryRPCClient) HelloCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*NodeMsg, error) {
	out := new(NodeMsg)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/HelloCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) FindRootCaller(ctx context.Context, in *IdMsg, opts ...grpc.CallOption) (*RootMsg, error) {
	out := new(RootMsg)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/FindRootCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RegisterCaller(ctx context.Context, in *Registration, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/RegisterCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) FetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*FetchedLocations, error) {
	out := new(FetchedLocations)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/FetchCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddNodeCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/AddNodeCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RemoveBadNodesCaller(ctx context.Context, in *Neighbors, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/RemoveBadNodesCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddNodeMulticastCaller(ctx context.Context, in *MulticastRequest, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/AddNodeMulticastCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TransferCaller(ctx context.Context, in *TransferData, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/TransferCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) AddBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/AddBackpointerCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) RemoveBackpointerCaller(ctx context.Context, in *NodeMsg, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/RemoveBackpointerCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) GetBackpointersCaller(ctx context.Context, in *BackpointerRequest, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/GetBackpointersCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) NotifyLeaveCaller(ctx context.Context, in *LeaveNotification, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/NotifyLeaveCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) BlobStoreFetchCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*DataBlob, error) {
	out := new(DataBlob)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/BlobStoreFetchCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TapestryStoreCaller(ctx context.Context, in *DataBlob, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/TapestryStoreCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tapestryRPCClient) TapestryLookupCaller(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Neighbors, error) {
	out := new(Neighbors)
	err := c.cc.Invoke(ctx, "/tapestry.TapestryRPC/TapestryLookupCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TapestryRPCServer is the server API for TapestryRPC service.
// All implementations must embed UnimplementedTapestryRPCServer
// for forward compatibility
type TapestryRPCServer interface {
	HelloCaller(context.Context, *NodeMsg) (*NodeMsg, error)
	FindRootCaller(context.Context, *IdMsg) (*RootMsg, error)
	RegisterCaller(context.Context, *Registration) (*Ok, error)
	FetchCaller(context.Context, *Key) (*FetchedLocations, error)
	AddNodeCaller(context.Context, *NodeMsg) (*Neighbors, error)
	RemoveBadNodesCaller(context.Context, *Neighbors) (*Ok, error)
	AddNodeMulticastCaller(context.Context, *MulticastRequest) (*Neighbors, error)
	TransferCaller(context.Context, *TransferData) (*Ok, error)
	AddBackpointerCaller(context.Context, *NodeMsg) (*Ok, error)
	RemoveBackpointerCaller(context.Context, *NodeMsg) (*Ok, error)
	GetBackpointersCaller(context.Context, *BackpointerRequest) (*Neighbors, error)
	NotifyLeaveCaller(context.Context, *LeaveNotification) (*Ok, error)
	BlobStoreFetchCaller(context.Context, *Key) (*DataBlob, error)
	TapestryStoreCaller(context.Context, *DataBlob) (*Ok, error)
	TapestryLookupCaller(context.Context, *Key) (*Neighbors, error)
	mustEmbedUnimplementedTapestryRPCServer()
}

// UnimplementedTapestryRPCServer must be embedded to have forward compatible implementations.
type UnimplementedTapestryRPCServer struct {
}

func (UnimplementedTapestryRPCServer) HelloCaller(context.Context, *NodeMsg) (*NodeMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloCaller not implemented")
}
func (UnimplementedTapestryRPCServer) FindRootCaller(context.Context, *IdMsg) (*RootMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindRootCaller not implemented")
}
func (UnimplementedTapestryRPCServer) RegisterCaller(context.Context, *Registration) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCaller not implemented")
}
func (UnimplementedTapestryRPCServer) FetchCaller(context.Context, *Key) (*FetchedLocations, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchCaller not implemented")
}
func (UnimplementedTapestryRPCServer) AddNodeCaller(context.Context, *NodeMsg) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodeCaller not implemented")
}
func (UnimplementedTapestryRPCServer) RemoveBadNodesCaller(context.Context, *Neighbors) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBadNodesCaller not implemented")
}
func (UnimplementedTapestryRPCServer) AddNodeMulticastCaller(context.Context, *MulticastRequest) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodeMulticastCaller not implemented")
}
func (UnimplementedTapestryRPCServer) TransferCaller(context.Context, *TransferData) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferCaller not implemented")
}
func (UnimplementedTapestryRPCServer) AddBackpointerCaller(context.Context, *NodeMsg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBackpointerCaller not implemented")
}
func (UnimplementedTapestryRPCServer) RemoveBackpointerCaller(context.Context, *NodeMsg) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBackpointerCaller not implemented")
}
func (UnimplementedTapestryRPCServer) GetBackpointersCaller(context.Context, *BackpointerRequest) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackpointersCaller not implemented")
}
func (UnimplementedTapestryRPCServer) NotifyLeaveCaller(context.Context, *LeaveNotification) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotifyLeaveCaller not implemented")
}
func (UnimplementedTapestryRPCServer) BlobStoreFetchCaller(context.Context, *Key) (*DataBlob, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlobStoreFetchCaller not implemented")
}
func (UnimplementedTapestryRPCServer) TapestryStoreCaller(context.Context, *DataBlob) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TapestryStoreCaller not implemented")
}
func (UnimplementedTapestryRPCServer) TapestryLookupCaller(context.Context, *Key) (*Neighbors, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TapestryLookupCaller not implemented")
}
func (UnimplementedTapestryRPCServer) mustEmbedUnimplementedTapestryRPCServer() {}

// UnsafeTapestryRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TapestryRPCServer will
// result in compilation errors.
type UnsafeTapestryRPCServer interface {
	mustEmbedUnimplementedTapestryRPCServer()
}

func RegisterTapestryRPCServer(s grpc.ServiceRegistrar, srv TapestryRPCServer) {
	s.RegisterService(&TapestryRPC_ServiceDesc, srv)
}

func _TapestryRPC_HelloCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).HelloCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/HelloCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).HelloCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_FindRootCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).FindRootCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/FindRootCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).FindRootCaller(ctx, req.(*IdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RegisterCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Registration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RegisterCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RegisterCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RegisterCaller(ctx, req.(*Registration))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_FetchCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).FetchCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/FetchCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).FetchCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddNodeCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddNodeCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddNodeCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddNodeCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RemoveBadNodesCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Neighbors)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RemoveBadNodesCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RemoveBadNodesCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RemoveBadNodesCaller(ctx, req.(*Neighbors))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddNodeMulticastCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MulticastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddNodeMulticastCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddNodeMulticastCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddNodeMulticastCaller(ctx, req.(*MulticastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TransferCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TransferCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TransferCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TransferCaller(ctx, req.(*TransferData))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_AddBackpointerCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).AddBackpointerCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/AddBackpointerCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).AddBackpointerCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_RemoveBackpointerCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).RemoveBackpointerCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/RemoveBackpointerCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).RemoveBackpointerCaller(ctx, req.(*NodeMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_GetBackpointersCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackpointerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).GetBackpointersCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/GetBackpointersCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).GetBackpointersCaller(ctx, req.(*BackpointerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_NotifyLeaveCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveNotification)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).NotifyLeaveCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/NotifyLeaveCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).NotifyLeaveCaller(ctx, req.(*LeaveNotification))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_BlobStoreFetchCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).BlobStoreFetchCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/BlobStoreFetchCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).BlobStoreFetchCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TapestryStoreCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataBlob)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TapestryStoreCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TapestryStoreCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TapestryStoreCaller(ctx, req.(*DataBlob))
	}
	return interceptor(ctx, in, info, handler)
}

func _TapestryRPC_TapestryLookupCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TapestryRPCServer).TapestryLookupCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tapestry.TapestryRPC/TapestryLookupCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TapestryRPCServer).TapestryLookupCaller(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// TapestryRPC_ServiceDesc is the grpc.ServiceDesc for TapestryRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TapestryRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tapestry.TapestryRPC",
	HandlerType: (*TapestryRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HelloCaller",
			Handler:    _TapestryRPC_HelloCaller_Handler,
		},
		{
			MethodName: "FindRootCaller",
			Handler:    _TapestryRPC_FindRootCaller_Handler,
		},
		{
			MethodName: "RegisterCaller",
			Handler:    _TapestryRPC_RegisterCaller_Handler,
		},
		{
			MethodName: "FetchCaller",
			Handler:    _TapestryRPC_FetchCaller_Handler,
		},
		{
			MethodName: "AddNodeCaller",
			Handler:    _TapestryRPC_AddNodeCaller_Handler,
		},
		{
			MethodName: "RemoveBadNodesCaller",
			Handler:    _TapestryRPC_RemoveBadNodesCaller_Handler,
		},
		{
			MethodName: "AddNodeMulticastCaller",
			Handler:    _TapestryRPC_AddNodeMulticastCaller_Handler,
		},
		{
			MethodName: "TransferCaller",
			Handler:    _TapestryRPC_TransferCaller_Handler,
		},
		{
			MethodName: "AddBackpointerCaller",
			Handler:    _TapestryRPC_AddBackpointerCaller_Handler,
		},
		{
			MethodName: "RemoveBackpointerCaller",
			Handler:    _TapestryRPC_RemoveBackpointerCaller_Handler,
		},
		{
			MethodName: "GetBackpointersCaller",
			Handler:    _TapestryRPC_GetBackpointersCaller_Handler,
		},
		{
			MethodName: "NotifyLeaveCaller",
			Handler:    _TapestryRPC_NotifyLeaveCaller_Handler,
		},
		{
			MethodName: "BlobStoreFetchCaller",
			Handler:    _TapestryRPC_BlobStoreFetchCaller_Handler,
		},
		{
			MethodName: "TapestryStoreCaller",
			Handler:    _TapestryRPC_TapestryStoreCaller_Handler,
		},
		{
			MethodName: "TapestryLookupCaller",
			Handler:    _TapestryRPC_TapestryLookupCaller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/tapestry_rpc.proto",
}
