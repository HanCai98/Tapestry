//
//  Brown University, CS138, Spring 2022
//
//  Purpose: Defines the Tapestry RPC protocol using Google's Protocol Buffers
//  syntax. See https://developers.google.com/protocol-buffers for more details.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.3
// source: pkg/tapestry_rpc.proto

package pkg

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Ok struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ok bool `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"` // Always true
}

func (x *Ok) Reset() {
	*x = Ok{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ok) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ok) ProtoMessage() {}

func (x *Ok) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ok.ProtoReflect.Descriptor instead.
func (*Ok) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Ok) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

type IdMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Level int32  `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *IdMsg) Reset() {
	*x = IdMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdMsg) ProtoMessage() {}

func (x *IdMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdMsg.ProtoReflect.Descriptor instead.
func (*IdMsg) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *IdMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *IdMsg) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type DataBlob struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Key  string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *DataBlob) Reset() {
	*x = DataBlob{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataBlob) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataBlob) ProtoMessage() {}

func (x *DataBlob) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataBlob.ProtoReflect.Descriptor instead.
func (*DataBlob) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *DataBlob) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataBlob) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *Key) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type NodeMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Id      string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *NodeMsg) Reset() {
	*x = NodeMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeMsg) ProtoMessage() {}

func (x *NodeMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeMsg.ProtoReflect.Descriptor instead.
func (*NodeMsg) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *NodeMsg) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *NodeMsg) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type RootMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Next     *NodeMsg   `protobuf:"bytes,1,opt,name=next,proto3" json:"next,omitempty"`
	ToRemove []*NodeMsg `protobuf:"bytes,2,rep,name=toRemove,proto3" json:"toRemove,omitempty"`
}

func (x *RootMsg) Reset() {
	*x = RootMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RootMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootMsg) ProtoMessage() {}

func (x *RootMsg) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootMsg.ProtoReflect.Descriptor instead.
func (*RootMsg) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *RootMsg) GetNext() *NodeMsg {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *RootMsg) GetToRemove() []*NodeMsg {
	if x != nil {
		return x.ToRemove
	}
	return nil
}

type Registration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromNode *NodeMsg `protobuf:"bytes,1,opt,name=fromNode,proto3" json:"fromNode,omitempty"`
	Key      string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Registration) Reset() {
	*x = Registration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Registration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Registration) ProtoMessage() {}

func (x *Registration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Registration.ProtoReflect.Descriptor instead.
func (*Registration) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *Registration) GetFromNode() *NodeMsg {
	if x != nil {
		return x.FromNode
	}
	return nil
}

func (x *Registration) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type FetchedLocations struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRoot bool       `protobuf:"varint,1,opt,name=isRoot,proto3" json:"isRoot,omitempty"`
	Values []*NodeMsg `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *FetchedLocations) Reset() {
	*x = FetchedLocations{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchedLocations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchedLocations) ProtoMessage() {}

func (x *FetchedLocations) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchedLocations.ProtoReflect.Descriptor instead.
func (*FetchedLocations) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *FetchedLocations) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *FetchedLocations) GetValues() []*NodeMsg {
	if x != nil {
		return x.Values
	}
	return nil
}

type Neighbors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Neighbors []*NodeMsg `protobuf:"bytes,1,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
}

func (x *Neighbors) Reset() {
	*x = Neighbors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Neighbors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Neighbors) ProtoMessage() {}

func (x *Neighbors) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Neighbors.ProtoReflect.Descriptor instead.
func (*Neighbors) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *Neighbors) GetNeighbors() []*NodeMsg {
	if x != nil {
		return x.Neighbors
	}
	return nil
}

type MulticastRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NewNode *NodeMsg `protobuf:"bytes,1,opt,name=newNode,proto3" json:"newNode,omitempty"`
	Level   int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *MulticastRequest) Reset() {
	*x = MulticastRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MulticastRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MulticastRequest) ProtoMessage() {}

func (x *MulticastRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MulticastRequest.ProtoReflect.Descriptor instead.
func (*MulticastRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *MulticastRequest) GetNewNode() *NodeMsg {
	if x != nil {
		return x.NewNode
	}
	return nil
}

func (x *MulticastRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type TransferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From *NodeMsg              `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Data map[string]*Neighbors `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *TransferData) Reset() {
	*x = TransferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferData) ProtoMessage() {}

func (x *TransferData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferData.ProtoReflect.Descriptor instead.
func (*TransferData) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *TransferData) GetFrom() *NodeMsg {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *TransferData) GetData() map[string]*Neighbors {
	if x != nil {
		return x.Data
	}
	return nil
}

type BackpointerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From  *NodeMsg `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Level int32    `protobuf:"varint,2,opt,name=level,proto3" json:"level,omitempty"`
}

func (x *BackpointerRequest) Reset() {
	*x = BackpointerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackpointerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackpointerRequest) ProtoMessage() {}

func (x *BackpointerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackpointerRequest.ProtoReflect.Descriptor instead.
func (*BackpointerRequest) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *BackpointerRequest) GetFrom() *NodeMsg {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *BackpointerRequest) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

type LeaveNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From        *NodeMsg `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Replacement *NodeMsg `protobuf:"bytes,2,opt,name=replacement,proto3" json:"replacement,omitempty"`
}

func (x *LeaveNotification) Reset() {
	*x = LeaveNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_tapestry_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveNotification) ProtoMessage() {}

func (x *LeaveNotification) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_tapestry_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveNotification.ProtoReflect.Descriptor instead.
func (*LeaveNotification) Descriptor() ([]byte, []int) {
	return file_pkg_tapestry_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *LeaveNotification) GetFrom() *NodeMsg {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *LeaveNotification) GetReplacement() *NodeMsg {
	if x != nil {
		return x.Replacement
	}
	return nil
}

var File_pkg_tapestry_rpc_proto protoreflect.FileDescriptor

var file_pkg_tapestry_rpc_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x5f, 0x72,
	0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74,
	0x72, 0x79, 0x22, 0x14, 0x0a, 0x02, 0x4f, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x22, 0x2d, 0x0a, 0x05, 0x49, 0x64, 0x4d, 0x73,
	0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x30, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x42,
	0x6c, 0x6f, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x17, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x33, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x07, 0x52, 0x6f, 0x6f, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x73, 0x67, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x6f, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x08,
	0x74, 0x6f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x22, 0x4f, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d,
	0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70,
	0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x08, 0x66,
	0x72, 0x6f, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x55, 0x0a, 0x10, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x65, 0x64, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69,
	0x73, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x22, 0x3c, 0x0a, 0x09, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x12, 0x2f, 0x0a,
	0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x4d, 0x73, 0x67, 0x52, 0x09, 0x6e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x22, 0x55,
	0x0a, 0x10, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x34, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44,
	0x61, 0x74, 0x61, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x51, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x22, 0x6f, 0x0a, 0x11, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x33, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0xb0, 0x07, 0x0a, 0x0b, 0x54, 0x61, 0x70, 0x65, 0x73, 0x74,
	0x72, 0x79, 0x52, 0x50, 0x43, 0x12, 0x35, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x43, 0x61,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74,
	0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e,
	0x46, 0x69, 0x6e, 0x64, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0f,
	0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x49, 0x64, 0x4d, 0x73, 0x67, 0x1a,
	0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4d,
	0x73, 0x67, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0c,
	0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x6b, 0x22, 0x00, 0x12, 0x3a,
	0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0d, 0x2e,
	0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x1a, 0x2e, 0x74,
	0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0d, 0x41, 0x64,
	0x64, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x11, 0x2e, 0x74, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x73, 0x67, 0x1a, 0x13,
	0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62,
	0x6f, 0x72, 0x73, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42,
	0x61, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x13, 0x2e,
	0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f,
	0x72, 0x73, 0x1a, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x6b,
	0x22, 0x00, 0x12, 0x4b, 0x0a, 0x16, 0x41, 0x64, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1a, 0x2e, 0x74,
	0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73,
	0x74, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x65,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x6b, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x14, 0x41, 0x64, 0x64,
	0x42, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x12, 0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x4d, 0x73, 0x67, 0x1a, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e,
	0x4f, 0x6b, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x11, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4d,
	0x73, 0x67, 0x1a, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x6b,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x74, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x70, 0x65,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x69, 0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x22, 0x00,
	0x12, 0x40, 0x0a, 0x11, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43,
	0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79,
	0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x0c, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x6b,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x14, 0x42, 0x6c, 0x6f, 0x62, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x74, 0x61, 0x70,
	0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x1a, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x65,
	0x73, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x22, 0x00, 0x12,
	0x39, 0x0a, 0x13, 0x54, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6c, 0x6f, 0x62, 0x1a, 0x0c, 0x2e, 0x74, 0x61, 0x70,
	0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x6b, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x14, 0x54, 0x61,
	0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x72, 0x12, 0x0d, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4b, 0x65,
	0x79, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x70, 0x65, 0x73, 0x74, 0x72, 0x79, 0x2e, 0x4e, 0x65, 0x69,
	0x67, 0x68, 0x62, 0x6f, 0x72, 0x73, 0x22, 0x00, 0x42, 0x09, 0x5a, 0x07, 0x70, 0x6b, 0x67, 0x2f,
	0x70, 0x6b, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_tapestry_rpc_proto_rawDescOnce sync.Once
	file_pkg_tapestry_rpc_proto_rawDescData = file_pkg_tapestry_rpc_proto_rawDesc
)

func file_pkg_tapestry_rpc_proto_rawDescGZIP() []byte {
	file_pkg_tapestry_rpc_proto_rawDescOnce.Do(func() {
		file_pkg_tapestry_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_tapestry_rpc_proto_rawDescData)
	})
	return file_pkg_tapestry_rpc_proto_rawDescData
}

var file_pkg_tapestry_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_pkg_tapestry_rpc_proto_goTypes = []interface{}{
	(*Ok)(nil),                 // 0: tapestry.Ok
	(*IdMsg)(nil),              // 1: tapestry.IdMsg
	(*DataBlob)(nil),           // 2: tapestry.DataBlob
	(*Key)(nil),                // 3: tapestry.Key
	(*NodeMsg)(nil),            // 4: tapestry.NodeMsg
	(*RootMsg)(nil),            // 5: tapestry.RootMsg
	(*Registration)(nil),       // 6: tapestry.Registration
	(*FetchedLocations)(nil),   // 7: tapestry.FetchedLocations
	(*Neighbors)(nil),          // 8: tapestry.Neighbors
	(*MulticastRequest)(nil),   // 9: tapestry.MulticastRequest
	(*TransferData)(nil),       // 10: tapestry.TransferData
	(*BackpointerRequest)(nil), // 11: tapestry.BackpointerRequest
	(*LeaveNotification)(nil),  // 12: tapestry.LeaveNotification
	nil,                        // 13: tapestry.TransferData.DataEntry
}
var file_pkg_tapestry_rpc_proto_depIdxs = []int32{
	4,  // 0: tapestry.RootMsg.next:type_name -> tapestry.NodeMsg
	4,  // 1: tapestry.RootMsg.toRemove:type_name -> tapestry.NodeMsg
	4,  // 2: tapestry.Registration.fromNode:type_name -> tapestry.NodeMsg
	4,  // 3: tapestry.FetchedLocations.values:type_name -> tapestry.NodeMsg
	4,  // 4: tapestry.Neighbors.neighbors:type_name -> tapestry.NodeMsg
	4,  // 5: tapestry.MulticastRequest.newNode:type_name -> tapestry.NodeMsg
	4,  // 6: tapestry.TransferData.from:type_name -> tapestry.NodeMsg
	13, // 7: tapestry.TransferData.data:type_name -> tapestry.TransferData.DataEntry
	4,  // 8: tapestry.BackpointerRequest.from:type_name -> tapestry.NodeMsg
	4,  // 9: tapestry.LeaveNotification.from:type_name -> tapestry.NodeMsg
	4,  // 10: tapestry.LeaveNotification.replacement:type_name -> tapestry.NodeMsg
	8,  // 11: tapestry.TransferData.DataEntry.value:type_name -> tapestry.Neighbors
	4,  // 12: tapestry.TapestryRPC.HelloCaller:input_type -> tapestry.NodeMsg
	1,  // 13: tapestry.TapestryRPC.FindRootCaller:input_type -> tapestry.IdMsg
	6,  // 14: tapestry.TapestryRPC.RegisterCaller:input_type -> tapestry.Registration
	3,  // 15: tapestry.TapestryRPC.FetchCaller:input_type -> tapestry.Key
	4,  // 16: tapestry.TapestryRPC.AddNodeCaller:input_type -> tapestry.NodeMsg
	8,  // 17: tapestry.TapestryRPC.RemoveBadNodesCaller:input_type -> tapestry.Neighbors
	9,  // 18: tapestry.TapestryRPC.AddNodeMulticastCaller:input_type -> tapestry.MulticastRequest
	10, // 19: tapestry.TapestryRPC.TransferCaller:input_type -> tapestry.TransferData
	4,  // 20: tapestry.TapestryRPC.AddBackpointerCaller:input_type -> tapestry.NodeMsg
	4,  // 21: tapestry.TapestryRPC.RemoveBackpointerCaller:input_type -> tapestry.NodeMsg
	11, // 22: tapestry.TapestryRPC.GetBackpointersCaller:input_type -> tapestry.BackpointerRequest
	12, // 23: tapestry.TapestryRPC.NotifyLeaveCaller:input_type -> tapestry.LeaveNotification
	3,  // 24: tapestry.TapestryRPC.BlobStoreFetchCaller:input_type -> tapestry.Key
	2,  // 25: tapestry.TapestryRPC.TapestryStoreCaller:input_type -> tapestry.DataBlob
	3,  // 26: tapestry.TapestryRPC.TapestryLookupCaller:input_type -> tapestry.Key
	4,  // 27: tapestry.TapestryRPC.HelloCaller:output_type -> tapestry.NodeMsg
	5,  // 28: tapestry.TapestryRPC.FindRootCaller:output_type -> tapestry.RootMsg
	0,  // 29: tapestry.TapestryRPC.RegisterCaller:output_type -> tapestry.Ok
	7,  // 30: tapestry.TapestryRPC.FetchCaller:output_type -> tapestry.FetchedLocations
	8,  // 31: tapestry.TapestryRPC.AddNodeCaller:output_type -> tapestry.Neighbors
	0,  // 32: tapestry.TapestryRPC.RemoveBadNodesCaller:output_type -> tapestry.Ok
	8,  // 33: tapestry.TapestryRPC.AddNodeMulticastCaller:output_type -> tapestry.Neighbors
	0,  // 34: tapestry.TapestryRPC.TransferCaller:output_type -> tapestry.Ok
	0,  // 35: tapestry.TapestryRPC.AddBackpointerCaller:output_type -> tapestry.Ok
	0,  // 36: tapestry.TapestryRPC.RemoveBackpointerCaller:output_type -> tapestry.Ok
	8,  // 37: tapestry.TapestryRPC.GetBackpointersCaller:output_type -> tapestry.Neighbors
	0,  // 38: tapestry.TapestryRPC.NotifyLeaveCaller:output_type -> tapestry.Ok
	2,  // 39: tapestry.TapestryRPC.BlobStoreFetchCaller:output_type -> tapestry.DataBlob
	0,  // 40: tapestry.TapestryRPC.TapestryStoreCaller:output_type -> tapestry.Ok
	8,  // 41: tapestry.TapestryRPC.TapestryLookupCaller:output_type -> tapestry.Neighbors
	27, // [27:42] is the sub-list for method output_type
	12, // [12:27] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pkg_tapestry_rpc_proto_init() }
func file_pkg_tapestry_rpc_proto_init() {
	if File_pkg_tapestry_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_tapestry_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ok); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataBlob); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RootMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Registration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchedLocations); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Neighbors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MulticastRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackpointerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_tapestry_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_tapestry_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_tapestry_rpc_proto_goTypes,
		DependencyIndexes: file_pkg_tapestry_rpc_proto_depIdxs,
		MessageInfos:      file_pkg_tapestry_rpc_proto_msgTypes,
	}.Build()
	File_pkg_tapestry_rpc_proto = out.File
	file_pkg_tapestry_rpc_proto_rawDesc = nil
	file_pkg_tapestry_rpc_proto_goTypes = nil
	file_pkg_tapestry_rpc_proto_depIdxs = nil
}
